Let's say you're writing a game about people who live in houses for your boss. I dunno it's like the Sims. Except they just live in the houses and do nothing else. It's not a very fun game but bear with me. So you write a `Person` class and a `House` class. The `Person` class handles the people stuff like moving around, talking, etc. and the `House` class handles house stuff like keeping a list of stuff inside of it. You have all the code you need and it works great. I mean it still sounds like an awful game but it works and it does what it's supposed to.

Your boss comes back to you and says "Hey this game sucks it needs dogs." He offers no explanation why this might be but he is your boss so you nod your head and start thinking about how to solve this problem.

Well you figure easily enough that you can just pull out a shared class maybe call it `ThingThatMoves` that shares some of the similar functionality between a dog and a person. So a dog is a `ThingThatMoves` and person is also a `ThingThatMoves`. That way the code for stuff like walking around can be shared between the two and you don't have to do any extra work. Nice you did it again. You're great.

Now your boss comes to you and says "Hey, you. Market trends show a sudden interest in ahhh carts or something". "Carts?" you ask this man who you hate deeply. "Yeah carts. Like the cart from that Monty Python skit, 'Bring out your dead', you know? With the bodies in it." "Shit", you accidentally say out loud. Your boss walks off shaking his head returning to the place where he came from. Probably hell because you hate him.

Shit is right though because you realize the `Cart` class shares behaviors from two different classes. It can move like `ThingThatMoves` but it's also like a `House` because it can have things inside of it. And houses don't move. Well, a class can't be *two* things so you give up and decide to quit because you're great and your boss is probably in hell.

Back in the real world however there is a solution to this problem. Well, there are probably several but *one* of those solutions is called ["composition over inheritance"](https://en.wikipedia.org/wiki/Composition_over_inheritance). It basically says instead of having a `Dog` that is singularly also a `ThingThatMoves` you have a `Dog` that is made up of, or composed, of parts like a `MoveComponent`, a `BarkComponent`, an `EatsComponent` and so on. If we loop back on the original problem, now a cart can easily share the same `MoveComponent` as a dog and it could also share the `ContainsItemsComponent` of a house.